
import keyring
import requests
import json
import logging
import html

keyring.get_keyring()

### Define global variables
MAX_CX_RESULTS = 10
CXSAST_RESULTS_XML = 'WebGoat.Net.xml'
serviceName = "VSTS_API"
username = "sean"
vsts_token = keyring.get_password(serviceName, username)
vsts_organization = "smccheckmarx"
project_name = "WebGoat.Net"


### Define Issue class for assistance with creating/adding issues to an array. Pretty print method for debugging ###
class Issue:
	def __init__(self, filename='', deeplink='', description='', severity='', similarityID='',pathNodeID='',wid=0, vulnerability='', assignedToUser=''):
		self.filename = filename
		self.deeplink = deeplink
		self.description = description
		self.severity = severity
		self.similarityID = similarityID
		self.pathNodeID = pathNodeID
		self.wid = wid
		self.vulnerability = vulnerability
		self.assignedToUser = assignedToUser
	def __eq__(self, other):
		return (self.similarityID + self.pathNodeID == other.similarityID + other.pathNodeID)
	def __str__(self):
		return ("WID: " + str(self.wid) + 
		"\nPathNodeID : " + str(self.pathNodeID) + 
		"\nSimilarityId # : " + str(self.similarityID) + 
		"\nFileName: " + self.filename + 
		"\nDeepLink: " + self.deeplink +
		"\nDescription: " + self.description + 
		"\nSeverity: " + self.severity +
		"\nVulnerability: " + self.vulnerability +
		"\nAssignedTo: " + self.assignedToUser)

### HELPER METHODS ###
### Will parse out the short file name from full path.
def prepFileName(filename):
	sourceList = filename.split('/')
	return sourceList[len(sourceList)-1]
### Parse XML from post-action file generated by Checkmarx SAST scan. Look for similarity IDs with Status = 'New' 
### XML Structure - CxXMLResults -> Query -> Result -> Path -> PathNode
def parse_xml(xmlFilePath):
	listOfIssues = list()
	import xml.etree.ElementTree as ET
	tree = ET.parse(xmlFilePath)
	root = tree.getroot()
	print("ProjectName: " + root.attrib["ProjectName"])
	print("InitiatorName: " + root.attrib["InitiatorName"])
	#Loop through Query tags
	queryResultCount = 0
	
	for query in root:
		vulnerability = query.attrib["name"]
		for result in query:
			if queryResultCount < MAX_CX_RESULTS:
				#Idenfity "New" issues
				if(result.attrib["Severity"] == "High"):
					for path in result:
						description = "Source " + path[0][0].text + " Line " + path[0][1].text + " Object " + path[0][4].text + " "
						description += "Destination " + path[len(path)-1][0].text + " Line " + path[len(path)-1][1].text + " Object " + path[len(path)-1][4].text + " "
						description += r'<a href= "' + result.attrib["DeepLink"] + r'">' + result.attrib["DeepLink"] + r'</a>'
						issue = Issue(result.attrib["FileName"], result.attrib["DeepLink"],description, result.attrib["Severity"], path.attrib["SimilarityId"], str(result.attrib["NodeId"]), 0, vulnerability, result.attrib["AssignToUser"])
						listOfIssues.append(issue)
					queryResultCount += 1

	if len(listOfIssues) > 0:
		return listOfIssues
	else:
		### There are no HV in the list
		return False
### Call VSTS API to utilize custom query to get all workItems from a specific project
### https://dev.azure.com/{organization}/{project}/{team}/_apis/wit/wiql/{id}?api-version=4.1
### pprint for debug
def get_vsts_workitems(project_name):
	headers = {
		"Authorization": "Basic " + vsts_token
	}

	vsts_response = requests.get("https://" + vsts_organization + ".visualstudio.com/" + project_name + "/_apis/wit/wiql/64e14bb5-7e1b-4081-acad-0ae8f89d3e72?api-version=4.1", headers=headers)

	if vsts_response.status_code == 200:
		response = vsts_response.json()
		if response["workItems"]:
			### String to hold all of the Work Item IDS for the next API call
			wid = ""
			### Loop through workItems to pull the ids
			for work_item in response["workItems"]:
				### Make sure the id is an int greater than 0
				if isinstance(work_item["id"], int) and work_item["id"] > 0:
					### Concatentate the id to the wid string
					### if an id already exists separate by a comma
					if len(wid) > 0:
						wid = wid + "," + str(work_item["id"])
					else:
			
						wid = str(work_item["id"])    
			### If wid is empty return false
			if len(wid) < 1:
				return False

			### Call VSTS API to get work item details based on the ids loaded into wid
			### GET https://dev.azure.com/{organization}/{project}/_apis/wit/workitems?ids={ids}&api-version=4.1
			### https://docs.microsoft.com/en-us/rest/api/vsts/wit/work%20items/list?view=vsts-rest-4.1
			newvsts = requests.get("https://" + vsts_organization + ".visualstudio.com/" + project_name + "/_apis/wit/workitems/?ids=" + wid + "&api-version=4.1", headers=headers)    

			if newvsts.status_code == 200: 
				work_item_response = newvsts.json()
				workItemList = list()
				witems = work_item_response['value']
				for witem in witems:
					workItem = Issue(similarityID= witem['fields']['Custom.CheckmarxSimilarityID'],pathNodeID= witem['fields']['Custom.CheckmarxNodeID'],wid = witem['id'])
					workItemList.append(workItem)
				# print(workItemList)
				
				return workItemList
			else:
				return False
	else:
		return False

def find_new_issues(xmlList,witemList):
	newIssues = list()
	for xml in xmlList:
		notFound = 0
		if witemList is not None:
			for witem in witemList:
				if witem == xml:
					notFound = 1
		if notFound == 0:
			newIssues.append(xml)
	return newIssues

def find_resolved_issues(xmlList,witemList):
	resolvedIssues = list()
	if witemList is not None:
		for witem in witemList:
			isFound = 0
			for xml in xmlList:
				if witem == xml:
					isFound = 1
			if isFound == 0:
				resolvedIssues.append(witem)
	return resolvedIssues

def addNewIssue(issue):
	filename = prepFileName(issue.filename)
	headers = {
		"Authorization": "Basic " + vsts_token,
		'Content-type': 'application/json-patch+json'
	}
	issueData = [
		{
			"op": "add",
			"path": "/fields/System.Title",
			"value": issue.vulnerability + " - " + issue.similarityID + " - " + filename
		},
		{
			"op": "add",
			"path": "/fields/Microsoft.VSTS.Common.Priority",
			"value": 2
		},
		{
			"op": "add",
			"path": "/fields/Microsoft.VSTS.Common.Severity",
			"value": "2 - High"
		},
		{
			"op": "add",
			"path": "/fields/Custom.CheckmarxSimilarityID",
			"value": issue.similarityID
		},
		{
			"op": "add",
			"path": "/fields/Custom.CheckmarxNodeID",
			"value": issue.pathNodeID
		},
		{
			"op": "add",
			"path": "/fields/Microsoft.VSTS.TCM.ReproSteps",
			"value": issue.description
		},
		{
			"op": "add",
			"path": "/fields/System.WorkItemType",
			"value": "Bug"
		}
	]
	
				
	

	postNewIssue = requests.post("https://smccheckmarx.visualstudio.com/WebGoat.Net/_apis/wit/workitems/$bug?api-version=4.1", json=issueData, headers=headers)   
	if postNewIssue.status_code == 200: 
		print("New Bugs Posted")
	else:
		print(postNewIssue.status_code)

def resolve_issues(witemList):
	headers = {
		"Authorization": "Basic " + vsts_token,
		'Content-type': 'application/json-patch+json'
	}
	issueData = [
		{
			"op": "add",
			"path": "/fields/System.State",
			"value": "Resolved"
		}
	]
	
				
	if len(witemList) > 0:
		for witem in witemList:

			# print(witem)
			resolveIssue = requests.patch("https://smccheckmarx.visualstudio.com/WebGoat.Net/_apis/wit/workitems/" + str(witem.wid) + "?api-version=4.1", json=issueData, headers=headers)   
			if resolveIssue.status_code == 200: 
				print("Bug Resolution Successful!")
			else:
				print(resolveIssue.status_code)
	else:
		print("There are no resolved issues")

### Get Work Items List
witems = get_vsts_workitems(project_name)

### Xml List
xml = parse_xml(CXSAST_RESULTS_XML)

### Compare XML and Work Items List to find new issues
newIssues = find_new_issues(xml,witems)

### Loop through new issues and add them into VSTS
for issue in newIssues:
	addNewIssue(issue)

### Compare CXSAST XML and Work Items List to find issues that are no longer in the CX XML Results, but are still in Work Items
resolvedIssuesList = find_resolved_issues(xml,witems)

### Mark issues that no longer exist as resolved
resolve_issues(resolvedIssuesList)
